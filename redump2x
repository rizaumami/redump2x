#!/usr/bin/env bash

# LICENSE ----------------------------------------------------------------------
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
#
# ------------------------------------------------------------------------------

# Get the current working directory.
THIS_DIR=$(cd "${0%%/*}" || exit; pwd)
#cd "$THIS_DIR" || exit

# Checking dependencies:
# 1.  extract xiso:
#     https://github.com/XboxDev/extract-xiso
#     - Use 32 build as 64 build is created problematic ISO's:
#       https://github.com/XboxDev/extract-xiso/issues/29
# 2.  7z, dd, grep, split
#     sudo aptitude install p7zip-full dd grep split
# 3.  attach.xbe
#     Get it from driveimageutils-v1.0.1 or Repackinator package.
declare -a DEPS=(7z 'attach.xbe' dd extract-xiso grep split)
for ((NUM=${#DEPS[@]},i=0; i<NUM;i++)); do
  if command -v "${DEPS[i]}" &>/dev/null || [[ -f $THIS_DIR/bin/${DEPS[i]} ]]; then
    unset -v 'DEPS[i]'
  fi
done

# Exit if dependency not found.
if [[ "${#DEPS[@]}" -gt 0 ]]; then
  printf '\e[31m!! %s\n\e[m' 'Package(s) not found'
  printf '   - %s\n' "${DEPS[@]}"
  exit 1
fi

# VARIABLES --------------------------------------------------------------------

# Most redump distributed as 7z archive. But we assume it's not.
ARCHIVE=false
# Boot from disk XISO need virtual disc attacher.
ATTACH=false

# In case you're using custom compiled extract-xiso.
if command -v extract-xiso &>/dev/null; then
  EXISO=$(command -v extract-xiso)
else
  EXISO="$THIS_DIR/bin/extract-xiso"
fi

# extract-xiso arguments.
EXISOARGS=('-qr')
# Default to where we executed the script command.
INPUT="$PWD"
OUTPUT="$PWD"
# Assume the redump archive is not password protected.
PASS=false
# FATX limit to 4GB / 4096 Megabyte 4294967296 bytes max file size.
SPLIT=false

# FUNCTIONS --------------------------------------------------------------------

print() {
  printf ':: %s\n' "$@"
}

# Print green text,
print_g() {
  printf '\e[32m:: %s\n\e[m' "$@"
}

# Print brown text.
print_w() {
  printf '\e[33m:: %s\n\e[m' "$@"
}

print_usage() {
  printf '%s\n' "
  ${0##*/} is a script to convert ogxbox redump archive into reguler xiso.

  Usage: ${0##*/} OPTION

  OPTION:
    -b    Create xiso folder to be booted from disk.
          Cerbios and driveimageutils can launch a game stored as an xiso on
          ogxbox's disk.
          Boot xiso from disk used as a solution to FATX limitations such as
          filename length, file/folder structure, etc.
    -D    Delete the input redump archive after processing.
    -d    Use dd instead of extract-xiso.
          This will only remove the redump's video partition, so the output
          will be quite big. Approx ~7 GB.
          Try this if extract-xiso produced unplayable image.
    -h    Print this help text and exit.
    -i    Input file or directory (default to current working directory).
          If input is a directory, the redump archives found inside will be
          batch processed.
    -o    Output directory (default to current working directory).
    -m    Enable .xbe media patching.
    -p    Password to extract encrypted archive.
          Script will exit on wrong password.
          If the archives protected with different passwords, it's better to not
          use this option and input password manually when asked.
    -s    Split output ISO into two equal size ISOs.
          Output will always be splitted when -b is used and its size is bigger
          than 4GB / 4096 Megabyte / 4294967296 bytes.
    -v    Print version information and exit.

  Example:
    - Convert CoolGame.iso and save it into /tmp/xiso directory.
      ${0##*/} -i $HOME/CoolGame.iso -o /tmp/xiso

    - Convert game isos in Redump directory and save it into /tmp/xiso.
      ${0##*/} -i $HOME/Redump -o /tmp/xiso

    - Convert CoolGame.iso to bootable from disk format.
      ${0##*/} -bi $HOME/CoolGame.iso

    - Convert CoolGame.iso and split the output into two equal size ISOs.
      ${0##*/} -si $HOME/CoolGame.iso

    - Provide password for password protected archive.
      ${0##*/} -p secretpassword -bi $HOME/CoolGame.7z
"
  exit
}

# MAIN -------------------------------------------------------------------------

# If this script run without argument.
if [[ ${#@} -eq 0 ]]; then
  print_usage
fi

while getopts ":bDdhi:mo:p:sv" opt; do
  case $opt in
    b)
      ATTACH=true
    ;;
    D)
      EXISOARGS+=('-D')
    ;;
    d)
      EXISO="$(command -v dd)"
    ;;
    h)
      print_usage
    ;;
    i)
      INPUT="$OPTARG"
    ;;
    o)
      OUTPUT="$OPTARG"
    ;;
    m)
      MEDIAPATCH=true
    ;;
    p)
      PASS=true
      PASSWORD="$OPTARG"
    ;;
    s)
      SPLIT=true
    ;;
    v)
      print 'redump2x v0.4 (2022.12.11) - written by si_kabayan'
      exit
    ;;
    \?)
      print_w "Wrong option: -$OPTARG" >&2
      exit 1
    ;;
    :)
      print_w "Option -$OPTARG need an argument." >&2
      exit 1
    ;;
  esac
done

# Check if the input is exist.
if [[ -d $INPUT ]]; then
  # Only find *.iso, *.7z, *.zip and *.rar bigger than 4 GB.
  mapfile -t XISO < <(find "$INPUT" -maxdepth 1 -type f -size +4G \( -name "*.iso" -o -name "*.7z" -o -name "*.zip" -o -name "*.rar" \) 2>/dev/null)
  if [[ ${#XISO} -eq 0 ]]; then
    print_w "No redump files found in $INPUT."
    exit 1
  fi
elif [[ -f $INPUT ]]; then
  XISO=("$INPUT")
else
  print_w "${INPUT}: No such file or directory"
  exit 1
fi

if [[ ! $MEDIAPATCH ]]; then
  EXISOARGS+=('-m')
fi

# FATX only support characters below (include space):
# ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&'()-.@[]^_`{}~
FATXCHARS='[^]0-9a-zA-Z!#$%&'\''().@^_`{}~\ [-]'

for (( n = 0; n < ${#XISO[@]}; n++ )) do
  print_g '' "Processing ${XISO[n]}"
  # Get basename
  FILENAME="${XISO[n]##*/}"
  FILENAME="${FILENAME%.*}"
  TITLE="${FILENAME%% (*}"

  # Move ", The" string in the middle of filename to the front.
  # This has benefit of removing comma, an illegal character in FATX.
  if [[ $TITLE =~ ', The' ]]; then
    TITLE=${TITLE/, The/}
    TITLE="The $TITLE"
  fi

  # Is game's title contains illegal caharacters?
  if [[ $TITLE =~ $FATXCHARS ]]; then
    print_w 'Removing unsupported character at:'
    for (( i = 0; i < ${#TITLE}; i++ )) do
      c=${TITLE:$i:1}
      if [[ $c =~ $FATXCHARS ]]; then
        print_w "- index $i: $c"
        # Remove unsupported character.
        TITLE="${TITLE:0:$i}${TITLE:$((i+1)):${#TITLE}}"
      fi
    done
  fi

  # FATX only support 42 characters for filename (that include spaces).
  # 4 characters are reserved for file extension (.iso).
  if [[ ${#TITLE} -gt 37 ]]; then
    # Limit game's title to 37 characters.
    TITLE="${TITLE:0:37}"
  fi

  if [[ ! -d $OUTPUT ]]; then
    mkdir -p "$OUTPUT"
  fi

  if $ATTACH; then
    SPLIT=true
    OUTPUT="$OUTPUT/$TITLE"
    mkdir -p "$OUTPUT"
    # TODO: edit default.xbe's title to game's title.
    cp "$THIS_DIR/bin/attach.xbe" "$OUTPUT/default.xbe"
  fi

  print 'Extracting....'
  # Is it an archive?
  if [[ "${XISO[n]##*.}" != 'iso' ]]; then
    ARCHIVE=true
    # Is the archive encrypted?
    if [[ $(7z l "${XISO[n]}" -slt | grep -oP '(?<=Encrypted = ).*?(?=$)') = '+' ]]; then
      if $PASS; then
        7z x -bso0 -p"$PASSWORD" -o"${XISO[n]%/*}" "${XISO[n]}"
      else
        # Ask for password
        7z x -o"${XISO[n]%/*}" "${XISO[n]}"
      fi
    fi
  fi

  if $ARCHIVE; then
    # Grep iso's name in the archive.
    # Only assume single iso as most redump archive contain single iso.
    XISOIN="${XISO[n]%/*}/$(7z l "${XISO[n]}" -slt | grep -oP '(?<=Path = ).*?(?=.iso).iso')"
  else
    XISOIN="${XISO[n]}"
  fi

  if [[ ${EXISO##*/} = 'extract-xiso' ]]; then
    # Rewrite xiso (-r) used here as it's convert xiso on the fly.
    "$EXISO" "${EXISOARGS[@]}" "$XISOIN" -d "$OUTPUT"
  else
    "$EXISO" if="$XISOIN" of="$OUTPUT/${FILENAME}.iso" skip=387 bs=1M status=none
  fi

  if [[ -f $OUTPUT/${FILENAME}.iso ]]; then
    mv "$OUTPUT/${FILENAME}.iso" "$OUTPUT/$TITLE.iso"
  else
    # No output. Perhaps the input is not in xiso format or corrupt. Clean it up.
    if $ATTACH; then
      rm -r "$OUTPUT"
    fi
    break
  fi

  # Rewrite xiso add ".old" extension to the original file. Revert it back.
  if [[ -f ${XISOIN}.old ]]; then
    if $ARCHIVE; then
      rm "${XISOIN}.old"
    else
      mv "${XISOIN}.old" "$XISOIN"
    fi
  fi

  if [[ $(stat -c%s "$OUTPUT/$TITLE.iso") -gt 4294967296 ]]; then
    print_w 'The extracted xiso is bigger than FATX limit.'
    if $SPLIT; then
      print 'Splitting....'
      split -a 1 --additional-suffix=".iso" -dn 2 "$OUTPUT/$TITLE.iso" "$OUTPUT/${TITLE:0:35}-"
      rm "$OUTPUT/$TITLE.iso"
    fi
  fi

  print_g 'Done. Xiso(s) can be found in:' "$OUTPUT"

  if $ATTACH; then
    find "$OUTPUT" -type f -printf ':: - %P\t%s\n'
  elif $SPLIT; then
    find "$OUTPUT" -maxdepth 1 -type f -iname "*-?.iso" -printf ':: - %P\t%s\n'
  else
    find "$OUTPUT" -maxdepth 1 -type f -name "$TITLE.iso" -printf ':: - %P\t%s\n'
  fi
done
