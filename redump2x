#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# LICENSE ----------------------------------------------------------------------
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
#
# ------------------------------------------------------------------------------

# Get the current working directory.
HERE=$(dirname "$(readlink -f "${0}")")

# Checking dependencies:
# 1.  extract xiso: https://github.com/XboxDev/extract-xiso
#     - Use 32 build as 64 build is created problematic ISO's:
#       https://github.com/XboxDev/extract-xiso/issues/29
# 2.  7z, grep, xxd
#     sudo apt install p7zip-full grep xxd
# 3.  attach.xbe
#     Get it from driveimageutils-v1.0.1 package from "the usual place".
# 4.  xbfuse: https://github.com/multimediamike/xbfuse
declare -a DEPS=(7z 'attach.xbe' dd extract-xiso grep xbfuse xxd)
for ((NUM=${#DEPS[@]},i=0; i<NUM;i++)); do
  if command -v "${DEPS[i]}" &>/dev/null || [[ -f $HERE/bin/${DEPS[i]} ]]; then
    unset -v 'DEPS[i]'
  fi
done

# Exit if dependency not found.
if [[ "${#DEPS[@]}" -gt 0 ]]; then
  printf '\e[31m!! %s\n\e[m' 'Package(s) not found'
  printf '   - %s\n' "${DEPS[@]}"
  exit 1
fi

# VARIABLES --------------------------------------------------------------------

# Most redump distributed as archive. But let assume it's not.
ARCHIVE=false
ARTWORKS="$HERE/bin/artworks.7z"
# Launching xiso from ogxbox's disk need virtual disc attacher.
# Let assume we just want to extract the xiso.
ATTACH=false
EXISO="$HERE/bin/extract-xiso"
# extract-xiso arguments.
# Rewrite xiso (-r) used here as it's convert xiso on the fly.
EXISOARGS=('-rm')
# Is there artwork for the game?
NOART=false
# Where to look for input. Default to user's home directory.
INPUT="$HOME"
# Install artworks.
INSTART=false
OUTPUT="$HOME"
OUTARG="$HOME"
# Assume the redump archive is not password protected.
PASS=false
# Delete the input file after processing.
REMIN=false
# If we want to launch xiso directly from ogxbox's disk, it's need to be smaller
# than FATX limit. Or we have to split it.
SPLIT=false
TMPDIR=$(mktemp -d)
# Update attacher.xbe and Icon.jpg.
UPDATE=false
XBE=''
# Path to xbfuse binary used to mount xiso.
XBFUSE="$HERE/bin/xbfuse"

# FUNCTIONS --------------------------------------------------------------------

remove_tmpdir() {
  [[ -d $TMPDIR/xbfuse ]] && umount -q "$TMPDIR/xbfuse"
  rm -r "$TMPDIR"
}

add_artworks() {
  # Artwork for UnleashX dashboard.
  if [[ -f $ARTWORKS ]]; then
    print 'Copying artwork  '
    mapfile -t ICON < <(7z l "$ARTWORKS" -slt | grep -oP "(?<=Path = ${1}).*?(?=$)")
    if [[ ${#ICON[@]} -eq 0 ]]; then
      NOART=true
    else
      7z e "$ARTWORKS" "${1}${ICON[0]}" -so > "$2/Icon.jpg"
    fi
  else
    NOART=true
    printf '\r\e[33m:: %s\n\e[m' 'Artwork is missing. Please install it first.'
  fi
}

clean_fname() {
  # FATX only support characters below (include space):
  # ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&'()-.@[]^_`{}~
  local FATXCHARS='[^]0-9a-zA-Z!#$%&'\''().@^_`{}~\ [-]'
  local CN="${1//:/ -}"
  # Is game's title contains illegal caharacters?
  if [[ $CN =~ $FATXCHARS ]]; then
    print_w 'Removing unsupported character at:'
    for (( i = 0; i < ${#CN}; i++ )) do
      c=${CN:$i:1}
      if [[ $c =~ $FATXCHARS ]]; then
        print_w "- index $i: $c"
        # Remove unsupported character.
        CN="${CN:0:$i}${CN:$((i+1)):${#CN}}"
      fi
    done
  fi
  # FATX only support 42 characters for filename (that include spaces).
  # 4 characters are reserved for file extension (.iso).
  if [[ ${#CN} -gt 37 ]]; then
    # Limit game's title to 38 characters.
    CN="${CN:0:37}"
  fi
  # Remove trailing whitespace
  shopt -s extglob
  TITLE="${CN%%+([[:space:]])}"
}

install_artworks() {
  local TID ARTDIR=${1%%.*}
  ARTDIR=${ARTDIR##*/}
  7z x -bso0 "$1" -o"$TMPDIR"
  mapfile -t COVER < <(find "$TMPDIR/$ARTDIR" -size +1k -type f -name '_resources.zip')

  for ((NUM=${#COVER[@]},i=0; i<NUM;i++)); do
    if [[ -f ${COVER[i]%/*}/detials.txt ]]; then
      TID=$(<"${COVER[i]%/*}/detials.txt")
      # Remove N/A if title doesn't have an ID.
      TID="${TID/N\/A/}"
      TID="${TID/|*\\/_}"
      # Remove carriage return.
      TID="${TID//$'\r'/}"
    else
      TID="$i"
    fi
    7z e -bso0 "${COVER[i]}" -o"$TMPDIR" '_resources/artwork/poster.jpg' -so > "$TMPDIR/${TID}.jpg"
  done
  7z a -bso0 "$ARTWORKS" "${TMPDIR}/*.jpg"
  remove_tmpdir
  print_g 'Artworks has been installed.'
}

patch_attach() {
  print 'Patching attacher'
  local XBEPATCH="$TMPDIR/${1##*/}.hexpatch"
  # Adjust offset from game's default/game.xbe to attach.xbe's offset.
  local SHIFT=$((0x00010178-$3))
  # Create certificate patch.
  xxd -c1 -l 464 -s $(($3-$2)) -o "$SHIFT" "$1" > "$XBEPATCH"
  # Certificate version.
  xxd -c1 -l 4 -s $((($3-$2)+172)) -o "$SHIFT" "$1" >> "$XBEPATCH"
  cp "$HERE/bin/attach.xbe" "$4/default.xbe"
  # Patching the attacher.
  xxd -c1 -r "$XBEPATCH" "$4/default.xbe"
}

print() {
  printf '\r:: %s' "$@"
}

# Print green text,
print_g() {
  printf '\e[32m:: %s\n\e[m' "$@"
}

# Print brown text.
print_w() {
  printf '\e[33m:: %s\n\e[m' "$@"
}

print_usage() {
  printf '%s\n' "
  ${0##*/} is a script to convert ogxbox redump archive into launchable xiso.

  Usage: ${0##*/} OPTION

  OPTION:
    -a    Install artworks (game cover) from Rocky5's Xbox Artwork Installer.
    -b    Create xiso folder to be booted from disk.
          Need Cerbios, or driveimageutils, or xiso patched M8+ BIOS to launch
          the folder.
    -D    Delete the input file after processing.
    -d    Use dd instead of extract-xiso.
          This will only remove the redump's video partition, so the output
          will be quite big. Mostly around ~7 GB.
    -h    Print this help text and exit.
    -i    Input file or directory (default to user's home directory).
          If input is a directory, files inside it will be batch processed.
    -o    Output directory (default to user's home directory).
    -p    Password to extract encrypted archive.
          Script will exit on wrong password.
          If the archives protected with different passwords, it's better to not
          use this option and input password manually when asked.
    -s    Split output xiso into two equal size.
    -u    Update attach.xbe with default.xbe's or game.xbe's certificate.
    -v    Print version information and exit.

  Example:
    - Install artwork.
      ${0##*/} -a -i 'Xbox Artwork Installer.zip'

    - Convert CoolGame.iso and save it into /tmp/xiso directory.
      ${0##*/} -i $HOME/CoolGame.iso -o /tmp/xiso

    - Convert game isos in Redump directory and save it into /tmp/xiso.
      ${0##*/} -i $HOME/Redump -o /tmp/xiso

    - Convert CoolGame.iso to bootable from disk format.
      ${0##*/} -bi $HOME/CoolGame.iso

    - Convert CoolGame.iso and split the output into two equal size ISOs.
      ${0##*/} -si $HOME/CoolGame.iso

    - Provide password for password protected archive.
      ${0##*/} -p secretpassword -bi $HOME/CoolGame.7z
"
  exit
}

# MAIN -------------------------------------------------------------------------

# If this script run without argument.
if [[ ${#@} -eq 0 ]]; then
  print_usage
fi

while getopts ":abDdhi:o:p:suv" opt; do
  case $opt in
    a)
      INSTART=true
    ;;
    b)
      ATTACH=true
    ;;
    D)
      REMIN=true
    ;;
    d)
      EXISO="$(command -v dd)"
    ;;
    h)
      print_usage
    ;;
    i)
      INPUT="$OPTARG"
    ;;
    o)
      OUTARG="$OPTARG"
      OUTPUT="$OUTARG"
    ;;
    p)
      PASS=true
      PASSWORD="$OPTARG"
    ;;
    s)
      SPLIT=true
    ;;
    u)
      UPDATE=true
    ;;
    v)
      echo ':: redump2x v1.0 (2023.06.02) - written by si_kabayan'
      exit
    ;;
    \?)
      print_w "Wrong option: -$OPTARG" >&2
      exit 1
    ;;
    :)
      print_w "Option -$OPTARG need an argument." >&2
      exit 1
    ;;
  esac
done

if [[ ! -w $OUTPUT ]]; then
  print_w 'Output directory is not writeable.'
  exit
fi

if $INSTART && [[ -f $INPUT ]]; then
  install_artworks "$INPUT"
  exit
fi

# Check if the input is exist.
if [[ -d $INPUT ]]; then
  if $UPDATE; then
    mapfile -t XISO < <(find "$INPUT" -maxdepth 2 -type f -name "*.iso" 2>/dev/null)
    INFILE='xiso'
  else
    # Most redump archive size are larger than 4 GB.
    # So, only find *.iso, *.7z, *.zip and *.rar bigger than 4 GB.
    mapfile -t XISO < <(find "$INPUT" -maxdepth 1 -type f -size +4G \( -name "*.iso" -o -name "*.7z" -o -name "*.zip" -o -name "*.rar" \) 2>/dev/null)
    INFILE='redump'
  fi
  if [[ ${#XISO[@]} -eq 0 ]]; then
    print_w "No $INFILE files found in $INPUT."
    exit
  fi
elif [[ -f $INPUT ]]; then
  XISO=("$INPUT")
else
  print_w "${INPUT}: No such file or directory"
  rmdir "$TMPDIR"
  exit
fi

for (( n = 0; n < ${#XISO[@]}; n++ )) do
  # xbfuse will only successfully mount first splitted xiso. Skip the latters.
  if [[ ${XISO[n]:(-6):2} == .1 ]]; then
    if [[ -f ${XISO[n]:0:(-6)}.0.iso ]]; then
      continue
    fi
  fi

  if $UPDATE; then
    # TODO: update title being processed in batch processing
    print_g "Processing ${XISO[n]}"
  else
    print_g "Processing ${XISO[n]}"
  fi
  # Get basename.
  FILENAME="${XISO[n]##*/}"
  FILENAME="${FILENAME%.*}"

  # Is it an archive?
  if [[ "${XISO[n]##*.}" != 'iso' ]]; then
    ARCHIVE=true
    # Grep iso's name in the archive.
    # Only assume single iso as most redump archive contain single iso.
    XISOIN="$TMPDIR/$(7z l "${XISO[n]}" -slt | grep -oP '(?<=Path = ).*?(?=.iso).iso')"
    # Is the archive encrypted?
    if [[ $(7z l "${XISO[n]}" -slt | grep -oP '(?<=Encrypted = ).*?(?=$)') = '+' ]]; then
      if $PASS; then
        7z x -bso0 -p"$PASSWORD" -o"$TMPDIR" "${XISO[n]}"
      else
        print_w 'Enter password:'
        7z x -bso0 -o"$TMPDIR" "${XISO[n]}"
      fi
    else
      7z x -bso0 -o"$TMPDIR" "${XISO[n]}"
    fi
  else
    XISOIN="${XISO[n]}"
  fi

  # TODO: extract default.xbe or game.xbe directly from xiso.
  mkdir -p "$TMPDIR/xbfuse" || exit
  "$XBFUSE" "$XISOIN" "$TMPDIR/xbfuse"

  for x in "$TMPDIR/xbfuse/"{{{d,D}efault,game}.xbe,{DEFAULT,GAME}.{XBE,xbe}}; do
    if [[ -f $x ]]; then
      XBE="$x"
      break
    fi
  done

  # Get base address.
  BASE="$(xxd -e -l 4 -s 0x104 "$XBE")"
  BASE="0x${BASE:10:8}"
  # Get certificate address.
  CERT="$(xxd -e -l 4 -s 0x118 "$XBE")"
  CERT="0x${CERT:10:8}"
  # Reverse Title ID.
  RTID=$(xxd -e -u -l 8 -s $(((CERT-BASE)+8)) "$XBE")
  RTID="${RTID:10:8}"
  # Use title name as file name.
  # NOTE: bash can't store null byte, will drop it, and then whine.
  # TODO: A proper way to get title name fom default.xbe.
  TITLE=''
  while IFS= read -r -d '' substring || [[ $substring ]]; do
    TITLE+="$substring"
  done < <(xxd -p -l 80 -s $(((CERT-BASE)+12)) "$XBE" | xxd -r -p)

  # When those offsets returned empty (different xbe or cert version?)
  # we use redump's filename as xiso's filename.
  # TODO: Detect xbe or cert version.
  if [[ -z "$TITLE" ]]; then
    TITLE="${FILENAME%% (*}"
  fi

  clean_fname "$TITLE"

  if $UPDATE; then
    OUTPUT=${XISO[n]%/*}
    patch_attach "$XBE" "$BASE" "$CERT" "$OUTPUT"
    add_artworks "$RTID" "$OUTPUT"
    if $NOART; then
      printf '\r:: %s\n' 'New default.xbe has been created but no artwork found.'
    else
      printf '\r:: %s\n' 'New default.xbe and Icon.jpg has been created.'
    fi
    remove_tmpdir
    continue
  fi

  # Patch attach.xbe with default/game.xbe's certificate.
  if $ATTACH; then
    OUTPUT="$OUTARG/$TITLE"
    mkdir -p "$OUTPUT"
    patch_attach "$XBE" "$BASE" "$CERT" "$OUTPUT"
    add_artworks "$RTID" "$OUTPUT"
  fi

  umount -q "$TMPDIR/xbfuse"

  if [[ ${EXISO##*/} = 'extract-xiso' ]]; then
    print 'Extracting redump'
    "$EXISO" "${EXISOARGS[@]}" "$XISOIN" -d "$OUTPUT" 1>"$TMPDIR"/extract.log
  else
    if [[ $(stat -c%s "$XISOIN") -lt 7825162240 ]]; then
      print_w 'Input size is less than 7825162240. Probably not a redump. Skipped.'
      break
    else
      print 'Removing video partition'
      "$EXISO" if="$XISOIN" of="$OUTPUT/${FILENAME}.iso" skip=387 bs=1M status=none
    fi
  fi

  # No output.
  if [[ ! -f $OUTPUT/${FILENAME}.iso ]]; then
    # Check if input is already an optimized xiso.
    if ! grep -q optimized "$TMPDIR"/extract.log; then
      # If it is not, then clean it up.
      if $ATTACH; then
        rm -r "$OUTPUT"
        break
      fi
    else
      print 'Copying already optimized input'
      cp "$XISOIN" "$OUTPUT"
    fi
  fi

  if [[ "$OUTPUT/${FILENAME}.iso" != "$OUTPUT/$TITLE.iso" ]]; then
    mv "$OUTPUT/${FILENAME}.iso" "$OUTPUT/$TITLE.iso"
  fi

  # Rewrite xiso add ".old" extension to the original file. Revert it back.
  if $ARCHIVE; then
    rm -f "${XISOIN}"{,.old}
  else
    if [[ -f "$XISOIN".old ]]; then
      mv "$XISOIN"{.old,}
    fi
  fi

  if $REMIN; then
    rm "$INPUT"
  fi

  if $ATTACH && [[ $(stat -c%s "$OUTPUT/$TITLE.iso") -gt 4294965248 ]]; then
    SPLIT=true
  fi

  if $SPLIT; then
    print 'Splitting xiso           '
    split -a 1 --additional-suffix=".iso" -dn 2 "$OUTPUT/$TITLE.iso" "$OUTPUT/${TITLE:0:35}."
    rm "$OUTPUT/$TITLE.iso"
    SPLIT=false
  fi

  remove_tmpdir

  printf '\r:: %s\n' "Done: $OUTPUT"
  if $ATTACH; then
    XFILES=()
  elif $SPLIT; then
    XFILES=( -name "*.?.iso" )
  else
    XFILES=( -name "$TITLE.iso" )
  fi
  find "$OUTPUT" -maxdepth 1 -type f "${XFILES[@]}" -printf '\t └─ %s - %P\n' | numfmt --field=2 --padding=+4 --to=si
done
