#!/usr/bin/env bash

# Sahri Riza Umami
#   v0.1 - 03/09/2022 19:18:19
#        - Initial release
#
# LICENSE ----------------------------------------------------------------------
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
#
# ------------------------------------------------------------------------------

# Get the current working directory.
THIS_DIR=$(cd "${0%%/*}" || exit; pwd)
#cd "$THIS_DIR" || exit

# Checking dependencies:
# 1.  extract xiso:
#     https://github.com/XboxDev/extract-xiso
#     - Use 32 build as 64 build is created problematic ISO's:
#       https://github.com/XboxDev/extract-xiso/issues/29
# 2.  split
#     Install from package manager; e.g. sudo aptitude install split.
# 3.  attach.xbe
#     It's from driveimageutils-v1.0.1 package. Get it from the usual place.
declare -a DEPS=(extract-xiso 'attach.xbe' split)
for ((NUM=${#DEPS[@]},i=0; i<NUM;i++)); do
  if command -v "${DEPS[i]}" &>/dev/null || [[ -f $THIS_DIR/bin/${DEPS[i]} ]]; then
    unset -v 'DEPS[i]'
  fi
done

# Exit if dependency not found.
if [[ "${#DEPS[@]}" -gt 0 ]]; then
  printf '\e[31m!! %s\n\e[m' 'Package(s) not found'
  printf '   - %s\n' "${DEPS[@]}"
  exit 1
fi

# VARIABLES --------------------------------------------------------------------

# Boot from disk XISO need virtual disk attacher.
ATTACH=false
INPUT="$PWD"
OUTPUT="$PWD"
# FATX limit to 4GB / 4096 Megabyte 4294967296 bytes max file size.
SPLIT=false

# FUNCTIONS --------------------------------------------------------------------

print() {
  printf ':: %s\n' "$@"
}

# Print green text,
print_g() {
  printf '\e[32m:: %s\n\e[m' "$@"
}

# Print brown text.
print_w() {
  printf '\e[33m:: %s\n\e[m' "$@"
}

print_usage() {
  printf '%s\n' "
  ${0##*/} is a script to convert ogxbox redump xiso in to reguler xiso.

  Usage: ${0##*/} OPTION

  OPTION:
    -b    Create xiso folder to be booted from disk.
          Cerbios and driveimageutils can launch a game stored as an xiso on
          ogxbox's disk.
          Boot xiso from disk used as a solution to FATX limitations such as
          filename length, file/folder structure, etc.
    -i    Input file or directory (default to current working directory).
    -o    Output directory (default to current working directory).
    -s    Split output ISO into two equal size ISOs.
          Split will always be enabled when -b is used.

  Example:
    - Convert CoolGame.iso and save it into /tmp/xiso directory.
      ${0##*/} -i $HOME/CoolGame.iso -o /tmp/xiso

    - Convert game isos in Redump directory and save it into /tmp/xiso.
      ${0##*/} -i $HOME/Redump -o /tmp/xiso

    - Convert CoolGame.iso to bootable from disk format.
      ${0##*/} -bi $HOME/CoolGame.iso

    - Convert CoolGame.iso and split the output into two equal size ISOs.
      ${0##*/} -si $HOME/CoolGame.iso
"
  exit
}

# MAIN -------------------------------------------------------------------------

# If this script run without argument.
if [[ ${#@} -eq 0 ]]; then
  print_usage
fi

while getopts ":hi:bo:s" opt; do
  case $opt in
    b)
      ATTACH=true
    ;;
    h)
      print_usage
    ;;
    i)
      INPUT="$OPTARG"
    ;;
    o)
      OUTPUT="$OPTARG"
      [[ -d $OUTPUT ]] || mkdir -p "$OUTPUT"
    ;;
    s)
      SPLIT=true
    ;;
    \?)
      print_w "Wrong option: -$OPTARG" >&2
      exit 1
    ;;
    :)
      print_w "Option -$OPTARG need an argument." >&2
      exit 1
    ;;
  esac
done

# Check if the input is exist.
if [[ -d $INPUT ]]; then
  mapfile -t XISO < <(find "$INPUT" -maxdepth 1 -type f -iname "*.iso" 2>/dev/null)
  if [[ ${#XISO} -eq 0 ]]; then
    print_w 'No iso files found.'
    exit 1
  fi
elif [[ -f $INPUT ]]; then
  XISO=("$INPUT")
else
  print_w "${INPUT}: No such file or directory"
  exit 1
fi

# FATX only support characters below (include space):
# ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&'()-.@[]^_`{}~
FATXCHARS='[^]0-9a-zA-Z!#$%&'\''().@^_`{}~\ [-]'

for (( n = 0; n < ${#XISO[@]}; n++ )) do
  print '----------------------------------------------' "Processing ${XISO[n]}"
  # Get basename
  FILENAME="${XISO[n]##*/}"
  TITLE="${FILENAME%% (*}"

  # Move ", The" string in the middle of filename to the front.
  # This has benefit of removing comma, an illegal character in FATX.
  if [[ $TITLE =~ ', The' ]]; then
    TITLE=${TITLE/, The/}
    TITLE="The $TITLE"
  fi

  # Is game's title contains illegal caharacters?
  if [[ $TITLE =~ $FATXCHARS ]]; then
    print_w 'Removing unsupported character at:'
    for (( i = 0; i < ${#TITLE}; i++ )) do
      c=${TITLE:$i:1}
      if [[ $c =~ $FATXCHARS ]]; then
        print_w "- index $i: $c"
        # Remove unsupported character.
        TITLE="${TITLE:0:$i}${TITLE:$((i+1)):${#TITLE}}"
      fi
    done
  fi

  # FATX only support 42 characters for filename (that include spaces).
  # 4 characters are reserved for file extension (.iso).
  if [[ ${#TITLE} -gt 37 ]]; then
    # Limit game's title to 37 characters.
    TITLE="${TITLE:0:37}"
  fi

  if $ATTACH; then
    SPLIT=true
    OUT="$OUTPUT/$TITLE"
    mkdir -p "$OUT"
    cp "$THIS_DIR/bin/attach.xbe" "$OUT/default.xbe"
  else
    OUT="$OUTPUT"
  fi

  print 'Extracting....'
  # Rewrite xiso (-r) used here as it's convert xiso on the fly,
  extract-xiso -qmr "${XISO[n]}" -d "$OUT"

  if [[ -f $OUT/$FILENAME ]]; then
    mv "$OUT/$FILENAME" "$OUT/$TITLE.iso"
    # Rewrite xiso add ".old" extension to the original file. Revert it back.
    mv "${XISO[n]}.old" "${XISO[n]}"
  else
    # No output. Perhaps the input is not in xiso format or corrupt. Clean it up.
    mv "${XISO[n]}.old" "${XISO[n]}"
    if $ATTACH; then
      rm -r "$OUT"
    fi
    break
  fi

  if $SPLIT; then
    if $ATTACH && [[ $(stat -c%s "$OUT/$TITLE.iso") -gt 4294967296 ]]; then
      print_w 'The output ISO is bigger than FATX limit.'
    fi
    print 'Splitting....'
    split -a 1 --additional-suffix=".iso" -dn 2 "$OUT/$TITLE.iso" "$OUT/${TITLE:0:35}-"
    rm "$OUT/$TITLE.iso"
  fi

  print_g 'Done:'
  if $ATTACH; then
    find "$OUT" -type f -printf ':: - %p\t%s\n'
  elif $SPLIT; then
    find "$OUT" -maxdepth 1 -type f -iname "*-?.iso" -printf ':: - %p\t%s\n'
  else
    print_g "- $OUT/$TITLE.iso"
  fi
done
